{"version":3,"sources":["component/1.jpg","component/Title.js","component/Header.js","component/Card.js","component/CardList.js","component/SearchBox.js","component/Scroll.js","Content.js","search/Searchbar.js","component/Hero.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Title","className","Header","userInfo","Card","name","email","id","alt","src","require","CardList","robots","cardComponent","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","Content","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","SearchBar","searchText","searchTextChange","searchByValue","onKeyPress","onClick","Hero","bind","persist","keyCode","which","console","log","App","showContent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iLAAAA,EAAOC,QAAU,IAA0B,+B,+JCY5BC,EAVD,WACZ,OACE,yBAAKC,UAAU,SAAf,wCCaWC,EAXA,SAAC,GAAiB,EAAfC,SAChB,OACE,yBAAKF,UAAU,UACb,kBAAC,EAAD,QCKSG,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAsB,EAAhBC,MAAgB,EAATC,GAC3B,OACE,yBAAKN,UAAU,4DAEb,yBAAKO,IAAI,SAASC,IAAKC,EAAQ,MAC/B,6BACE,4BAAKL,MCOEM,EAZE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEZC,EAAgBD,EAAOE,IAAI,SAACC,EAAKC,GACnC,OAAO,kBAAC,EAAD,CAAMT,GAAIK,EAAOI,GAAGT,GAAIF,KAAMO,EAAOI,GAAGX,KAAMC,MAAOM,EAAOI,GAAGV,UAE1E,OACE,6BACGO,ICKQI,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACE,yBAAKlB,UAAU,OACb,2BACEA,UAAU,gDACVmB,KAAK,SACLC,YAAY,eACZC,SAAUH,MCCHI,EARA,SAACC,GACd,OACE,yBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEJ,EAAMK,WC2CEC,E,YApCb,aAAe,IAAD,8BACZ,+CAaFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAEf,YAAac,EAAME,OAAOC,SAb1C,EAAKC,MAAQ,CACXxB,OAAQ,GACRM,YAAa,IAJH,E,iFAQO,IAAD,OAClBmB,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAGA,EAASC,SACzBF,KAAK,SAAAG,GAAU,EAAKR,SAAS,CAAErB,OAAQ6B,Q,+BAOlC,IAAD,EACyBC,KAAKN,MAA7BxB,EADD,EACCA,OAAQM,EADT,EACSA,YACVyB,EAAiB/B,EAAOgC,OAAO,SAAAC,GACnC,OAAOA,EAAMxC,KAAKyC,cAAcC,SAAS7B,EAAY4B,iBAEvD,OAAQlC,EAAOoC,OAGX,yBAAK/C,UAAU,MACb,kBAAC,EAAD,CAAWkB,aAAcuB,KAAKX,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUnB,OAAQ+B,MALxB,2C,GA1BgBM,aCYPC,EAnBG,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,WAAYC,EAAsC,EAAtCA,iBAAkBC,EAAoB,EAApBA,cACjD,OACE,yBAAKpD,UAAU,cACb,2BAAOA,UAAU,kBACfmB,KAAK,OACLe,MAAOgB,EACPG,WAAYF,EACZ9B,SAAU8B,EACV/B,YAAY,mCACd,uBAAGpB,UAAU,6BAEb,4BAAQA,UAAU,iBAChBsD,QAASF,GADX,cC2CSG,E,YAnDb,WAAYhC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDY,MAAQ,CACXe,WAAY,IAGd,EAAKC,iBAAmB,EAAKA,iBAAiBK,KAAtB,gBACxB,EAAKJ,cAAgB,EAAKA,cAAcI,KAAnB,gBARJ,E,8EAWFzB,GACfA,EAAM0B,UAENhB,KAAKT,SAAS,CAAEkB,WAAYnB,EAAME,OAAOC,QAEpB,IAAjBH,EAAM2B,SAAgC,IAAf3B,EAAM4B,OAC/BlB,KAAKW,kB,sCAOsB,IAAzBX,KAAKN,MAAMe,aACbU,QAAQC,IAAI,+CAAgDpB,KAAKN,MAAMe,YACvET,KAAKlB,MAAM6B,cAAcX,KAAKN,MAAMe,e,+BAI9B,IAEFA,EAAeT,KAAKN,MAApBe,WACkBT,KAAKlB,MAAvB6B,cAEN,OACE,yBAAKpD,UAAU,YAEP,yBAAKA,UAAU,cAAf,iDACA,kBAAC,EAAD,CACEkD,WAAYA,EACZC,iBAAkBV,KAAKU,iBACvBC,cAAeX,KAAKW,qB,GA3CjBJ,aCiDJc,G,wBAlCb,WAAYvC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDY,MAAQ,CACX4B,aAAa,EACbb,WAAY,IAEd,EAAKE,cAAgB,EAAKA,cAAcI,KAAnB,gBAPJ,E,2EAULN,GACZU,QAAQC,IAAI,qBAAsBX,GAClCT,KAAKT,SAAS,CAAE+B,aAAa,EAAMb,iB,+BAI3B,IAAD,EACoDT,KAAKN,MAA1D4B,EADC,EACDA,YAAa7D,EADZ,EACYA,SAAyBgD,GADrC,EACsBE,cADtB,EACqCF,YAC5C,OAEI,yBAAKlD,UAAU,aAEb,kBAAC,EAAD,MAEmB,GAAf+D,EACA,kBAAC,EAAD,CAAMX,cAAeX,KAAKW,gBAC1B,kBAAC,EAAD,CAASF,WAAYA,EAAYhD,SAAUA,S,GA7BvC8C,cCLEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,KAAK,SAAAuC,GACjCA,EAAaC,iB","file":"static/js/main.cc95b5a9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1.890362cb.jpg\";","import React from 'react';\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      No More Hungry in American Airlines\n\n    </div>\n  );\n};\n\n\nexport default Title;","import React from 'react';\n\n\nimport Title from './Title'\n\n\nconst Header = ({ userInfo }) => {\n  return (\n    <div className=\"header\">\n      <Title />\n    </div>\n  );\n};\n\n\n\n\nexport default Header;","import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5 w-30'>\n        \n      <img alt='robots' src={require('./1.jpg')}/>\n      <div>\n        <h2>{name}</h2>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\n  const cardComponent = robots.map((user,i)=>{\n      return <Card id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\n  })\n  return (\n    <div>\n      {cardComponent}\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 tc-l br-pill ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search items'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","// dependencies\nimport React, { Component } from 'react';\n\nimport CardList from './component/CardList';\nimport SearchBox from './component/SearchBox';\nimport Scroll from './component/Scroll';\n\n\n\n\nclass Content extends Component {\n \n  constructor() {\n    super()\n    this.state = {\n      robots: [],\n      searchfield: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=> response.json())\n      .then(users => {this.setState({ robots: users})});\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value })\n  }\n\n  render() {\n    const { robots, searchfield } = this.state;\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    })\n    return !robots.length ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <SearchBox searchChange={this.onSearchChange}/>\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default Content;","import React from 'react';\n\n\nconst SearchBar = ({ searchText, searchTextChange, searchByValue }) => {\n  return (\n    <div className=\"search-bar\" >\n      <input className=\"search-box tc-l\"\n        type=\"text\"\n        value={searchText}\n        onKeyPress={searchTextChange}\n        onChange={searchTextChange}\n        placeholder=\"Search here for todays cuisine\" />\n      <i className=\"fa fa-search search-icon\"></i>\n\n      <button className=\"btn search-btn\"\n        onClick={searchByValue}> search </button>\n    </div>\n  );\n};\n\n\n\nexport default SearchBar;\n\n\n","import React, { Component } from 'react';\n\n// components\nimport SearchBar from '../search/Searchbar';\n\nclass Hero extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchText: ''\n    }\n\n    this.searchTextChange = this.searchTextChange.bind(this)\n    this.searchByValue = this.searchByValue.bind(this)\n  }\n\n  searchTextChange(event) {\n    event.persist()\n    // change the state with the value typed in the search box\n    this.setState({ searchText: event.target.value })\n\n    if (event.keyCode == 13 || event.which == 13) {\n      this.searchByValue()\n    }\n\n  }\n\n  searchByValue() {\n    // if ENTER key is pressed\n    if (this.state.searchText != \"\") {\n      console.log('ENTER key pressed / SEARCH button clicked...', this.state.searchText)\n      this.props.searchByValue(this.state.searchText)\n    }\n  }\n\n  render() {\n\n    let { searchText } = this.state\n    let { searchByValue } = this.props\n\n    return (\n      <div className=\"hero-div\">\n         \n              <div className=\"find-title\">Make your best cuisine with American Airlines</div>\n              <SearchBar\n                searchText={searchText}\n                searchTextChange={this.searchTextChange}\n                searchByValue={this.searchByValue} />\n          \n      </div>\n    );\n  }\n};\n\n\n\nexport default Hero;","\n\n\n\nimport React, { Component } from 'react';\n\n\n// components \nimport Header from './component/Header';\nimport Content from './Content';\nimport Hero from './component/Hero';\nimport './App.css';\n\n\nimport './CSS/style.css'\n\n\nclass App extends Component {\n\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showContent: false,\n      searchText: ''\n    }\n    this.searchByValue = this.searchByValue.bind(this)\n  }\n\n  searchByValue(searchText) {\n    console.log('Search text is now', searchText)\n    this.setState({ showContent: true, searchText })\n  }\n\n\n  render() {\n    let { showContent, userInfo, searchByValue, searchText } = this.state\n    return (\n    \n        <div className=\"container\">\n       \n          <Header />\n\n            {(showContent == false)\n            ? <Hero searchByValue={this.searchByValue} />\n            : <Content searchText={searchText} userInfo={userInfo} />}\n          \n        </div>\n      \n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}